generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  comments      Comment[]
  followings    Follow[]       @relation("follower")
  followers     Follow[]       @relation("following")
  likes         Like[]
  photoComments PhotoComment[]
  photoLikes    PhotoLike[]
  photoViews    PhotoView[]
  profiles      Profile[]
  sessions      Session[]
  videoViews    VideoView[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                 String             @id @default(cuid())
  userId             String
  username           String             @unique
  displayName        String?            // Anzeigename des Profils, kann vom Benutzernamen abweichen
  bio                String?
  location           String?
  profileImage       String?
  age                Int?
  gender             String?
  bodyType           String?
  height             Int?
  weight             Int?
  ethnicity          String?
  languages          String[]
  profileType        ProfileType        @default(ESCORT)
  verificationStatus VerificationStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  breastSize         String?
  breastType         String?
  eyes               String?
  hair               String?
  hairLength         String?
  intimate           String?
  measurements       String?
  piercings          String?
  tattoos            String?
  availability       Availability[]
  photos             Photo[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  rates              Rate[]
  reviews            Review[]
  services           Service[]
  videos             Video[]
}

model Video {
  id           String      @id @default(cuid())
  profileId    String
  title        String?
  description  String?
  url          String
  thumbnailUrl String?
  duration     Int?
  isPublic     Boolean     @default(true)
  isPremium    Boolean     @default(false)
  hasSound     Boolean     @default(true)
  soundId      String?
  hashtags     String[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  comments     Comment[]
  likes        Like[]
  profile      Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  sound        Sound?      @relation(fields: [soundId], references: [id])
  views        VideoView[]
}

model Sound {
  id         String   @id @default(cuid())
  name       String
  audioUrl   String
  duration   Int
  artist     String?
  isOriginal Boolean  @default(false)
  isLicensed Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  videos     Video[]
}

model Photo {
  id        String         @id @default(cuid())
  profileId String
  url       String
  isPublic  Boolean        @default(true)
  isPremium Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  caption   String?
  profile   Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  comments  PhotoComment[]
  likes     PhotoLike[]
  views     PhotoView[]
}

model Service {
  id          String   @id @default(cuid())
  profileId   String
  name        String
  description String?
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Rate {
  id          String   @id @default(cuid())
  profileId   String
  duration    String
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Availability {
  id          String   @id @default(cuid())
  profileId   String
  dayOfWeek   Int      // 0-6 f√ºr Sonntag bis Samstag
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Review {
  id         String   @id @default(cuid())
  profileId  String
  authorName String
  rating     Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String
  content        String?
  videoUrl       String?
  imageUrl       String?
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String    @id @default(cuid())
  participant1  String
  participant2  String
  lastMessageAt DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
}

model VideoView {
  id        String   @id @default(cuid())
  videoId   String
  userId    String?
  ip        String?
  userAgent String?
  viewedAt  DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, userId, ip], name: "uniqueView")
}

model PhotoLike {
  id        String   @id @default(cuid())
  photoId   String
  userId    String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([photoId, userId])
}

model PhotoComment {
  id        String   @id @default(cuid())
  photoId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhotoView {
  id        String   @id @default(cuid())
  photoId   String
  userId    String?
  ip        String?
  userAgent String?
  viewedAt  DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ProfileType {
  ESCORT
  MITGLIED
  AGENCY
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}
